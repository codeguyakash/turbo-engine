import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  MyHomePage({super.key});
  final List<Map<String, dynamic>> campaigns = [
    {
      "id": "1",
      "campaign_name": "Cloud Flare Video 1",
      "video_url":
          "https://customer-ehb10et0cdjuxw72.cloudflarestream.com/4a302f5007089242e1a5d7259eeaf0c7/iframe?poster=https%3A%2F%2Fcustomer-ehb10et0cdjuxw72.cloudflarestream.com%2F4a302f5007089242e1a5d7259eeaf0c7%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600", // Ensure this is a direct MP4 link
      "duration": "15",
      "thumbnail_url": "https://picsum.photos/200/300",
    },
    {
      "id": "2",
      "campaign_name": "Cloud Flare Video 2",
      "video_url":
          "https://customer-ehb10et0cdjuxw72.cloudflarestream.com/4a302f5007089242e1a5d7259eeaf0c7/iframe?poster=https%3A%2F%2Fcustomer-ehb10et0cdjuxw72.cloudflarestream.com%2F4a302f5007089242e1a5d7259eeaf0c7%2Fthumbnails%2Fthumbnail.jpg%3Ftime%3D%26height%3D600", // Ensure this is a direct MP4 link
      "duration": "15",
      "thumbnail_url": "https://picsum.photos/200/300",
    },
    {
      "id": '3',
      "campaign_name": "Sample Video 3",
      "video_url":
          "https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4", // Replace with a compatible link
      "duration": "15",
      "thumbnail_url": "https://picsum.photos/200/300",
    },
    {
      "id": '4',
      "campaign_name": "Sample Video 4",
      "video_url":
          "https://storage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4", // Replace with a compatible link
      "duration": "15",
      "thumbnail_url": "https://picsum.photos/200/300",
    },
    {
      "id": '5',
      "campaign_name": "Sample Video 5",
      "video_url":
          "http://distribution.bbb3d.renderfarming.net/video/mp4/bbb_sunflower_1080p_30fps_normal.mp4", // Replace with a compatible link
      "duration": "15",
      "thumbnail_url": "https://picsum.photos/200/300",
    }
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Video Grid')),
      body: GridView.builder(
        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2,
          crossAxisSpacing: 10,
          mainAxisSpacing: 10,
        ),
        itemCount: campaigns.length,
        itemBuilder: (context, index) {
          final campaign = campaigns[index];
          return InkWell(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => DetailScreen(
                    videoUrl: campaign['video_url'],
                    campaignName: campaign['campaign_name'],
                  ),
                ),
              );
            },
            child: Card(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Expanded(
                    child: Stack(
                      children: [
                        ClipRRect(
                          borderRadius: const BorderRadius.only(
                            topLeft: Radius.circular(8),
                            topRight: Radius.circular(8),
                          ),
                          child: Image.network(
                            campaign['thumbnail_url'],
                            fit: BoxFit.cover,
                            width: double.infinity,
                            height: double.infinity,
                          ),
                        ),
                        const Center(
                          child: Icon(
                            Icons.play_circle_outline,
                            color: Colors.white,
                            size: 50,
                          ),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: Text(
                      campaign['campaign_name'],
                      textAlign: TextAlign.center,
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}

class DetailScreen extends StatefulWidget {
  final String videoUrl;
  final String campaignName;

  const DetailScreen({
    super.key,
    required this.videoUrl,
    required this.campaignName,
  });

  @override
  _DetailScreenState createState() => _DetailScreenState();
}

class _DetailScreenState extends State<DetailScreen> {
  late VideoPlayerController _controller;
  bool _isLoading = true;
  bool _hasError = false;

  @override
  void initState() {
    super.initState();
    _initializeVideoPlayer();
    _fetchSupportedCodecs(); // Add this for codec logging
  }

  void _initializeVideoPlayer() async {
    try {
      _controller = VideoPlayerController.network(widget.videoUrl)
        ..addListener(() {
          if (mounted) setState(() {});
        })
        ..setLooping(true)
        ..initialize().then((_) {
          setState(() {
            _isLoading = false;
            _controller.play();
          });
        }).catchError((e) {
          print('Error initializing video: $e');
          setState(() {
            _hasError = true;
          });
        });
    } catch (e) {
      print('Exception during initialization: $e');
      setState(() {
        _hasError = true;
        _isLoading = false;
      });
    }
  }

  Future<void> _fetchSupportedCodecs() async {
    print("Fetching supported codecs...");
    // Add any custom codec fetching logic here if needed.
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Video Screen'),
      ),
      body: _hasError
          ? const Center(
              child: Text(
                'Error loading video',
                style: TextStyle(color: Colors.red, fontSize: 18),
              ),
            )
          : _isLoading
              ? const Center(child: CircularProgressIndicator())
              : AspectRatio(
                  aspectRatio: _controller.value.aspectRatio,
                  child: VideoPlayer(_controller),
                ),
    );
  }
}
